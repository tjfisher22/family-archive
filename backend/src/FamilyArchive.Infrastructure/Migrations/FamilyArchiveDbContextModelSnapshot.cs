// <auto-generated />
using System;
using FamilyArchive.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FamilyArchive.Infrastructure.Migrations
{
    [DbContext(typeof(FamilyArchiveDbContext))]
    partial class FamilyArchiveDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FamilyArchive.Domain.Entities.Family", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Families");
                });

            modelBuilder.Entity("FamilyArchive.Domain.Entities.Member", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeathDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("FamilyId")
                        .HasColumnType("uuid");

                    b.Property<string>("Gender")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FamilyId");

                    b.ToTable("Members");
                });

            modelBuilder.Entity("FamilyArchive.Domain.Entities.MemberName", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Hidden")
                        .HasColumnType("boolean");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uuid");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<int?>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.ToTable("MemberNames");
                });

            modelBuilder.Entity("FamilyArchive.Domain.Entities.MemberPartnership", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PartnerId")
                        .HasColumnType("uuid");

                    b.Property<int>("PartnershipType")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.HasIndex("PartnerId");

                    b.ToTable("MemberPartnerships");
                });

            modelBuilder.Entity("FamilyArchive.Domain.Entities.MemberRelationship", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("EstablishedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RelatedMemberId")
                        .HasColumnType("uuid");

                    b.Property<string>("RelationshipType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.HasIndex("RelatedMemberId");

                    b.ToTable("MemberRelationships");
                });

            modelBuilder.Entity("FamilyArchive.Domain.Entities.Member", b =>
                {
                    b.HasOne("FamilyArchive.Domain.Entities.Family", "Family")
                        .WithMany("Members")
                        .HasForeignKey("FamilyId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Family");
                });

            modelBuilder.Entity("FamilyArchive.Domain.Entities.MemberName", b =>
                {
                    b.HasOne("FamilyArchive.Domain.Entities.Member", "Member")
                        .WithMany("Names")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("FamilyArchive.Domain.Entities.MemberPartnership", b =>
                {
                    b.HasOne("FamilyArchive.Domain.Entities.Member", "Member")
                        .WithMany("Partnerships")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FamilyArchive.Domain.Entities.Member", "Partner")
                        .WithMany("PartnerPartnerships")
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("Partner");
                });

            modelBuilder.Entity("FamilyArchive.Domain.Entities.MemberRelationship", b =>
                {
                    b.HasOne("FamilyArchive.Domain.Entities.Member", "Member")
                        .WithMany("Relationships")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FamilyArchive.Domain.Entities.Member", "RelatedMember")
                        .WithMany("ParentRelationships")
                        .HasForeignKey("RelatedMemberId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("RelatedMember");
                });

            modelBuilder.Entity("FamilyArchive.Domain.Entities.Family", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("FamilyArchive.Domain.Entities.Member", b =>
                {
                    b.Navigation("Names");

                    b.Navigation("ParentRelationships");

                    b.Navigation("PartnerPartnerships");

                    b.Navigation("Partnerships");

                    b.Navigation("Relationships");
                });
#pragma warning restore 612, 618
        }
    }
}
